import { exec } from "node:child_process";
import { promises as fs } from "node:fs";
import path from "node:path";
import { rimraf } from "rimraf";

import { registry } from "../registry/index.ts";

async function buildRegistryIndex() {
  let index = `// @ts-nocheck
// biome-ignore-all lint: This file is autogenerated
// This file is autogenerated by src/scripts/build-registry.ts
// Do not edit this file directly.
import * as React from "react"

export const Index: Record<string, any> = {`;
  for (const item of registry.items) {
    const resolveFiles = item.files?.map(
      (file) => `src/registry/default/${file.path}`,
    );
    if (!resolveFiles) {
      continue;
    }

    const componentPath = item.files?.[0]?.path
      ? `@/${item.files[0].path.replace(/^src\//, "")}`
      : "";

    index += `
  "${item.name}": {
    name: "${item.name}",
    description: "${item.description ?? ""}",
    type: "${item.type}",
    registryDependencies: ${JSON.stringify(item.registryDependencies)},
    files: [${item.files?.map((file) => {
      const filePath = typeof file === "string" ? file : file.path;
      const resolvedFilePath = path.resolve(filePath);
      return typeof file === "string"
        ? `"${resolvedFilePath}"`
        : `{
      path: "${filePath}",
      type: "${file.type}",
      target: "${file.target ?? ""}"
    }`;
    })}],
    component: ${
      componentPath
        ? `React.lazy(async () => {
      const mod = await import("${componentPath}")
      const exportName = Object.keys(mod).find(key => typeof mod[key] === 'function' || typeof mod[key] === 'object') || item.name
      return { default: mod.default || mod[exportName] }
    })`
        : "null"
    },
    categories: ${JSON.stringify(item.categories)},
    meta: ${JSON.stringify(item.meta)},
  },`;
  }

  index += `
  }`;

  console.log(`📁  ${Object.keys(registry.items).length} items found`);

  // Write style index.
  rimraf.sync(path.join(process.cwd(), "src/registry/__index__.tsx"));
  await fs.writeFile(
    path.join(process.cwd(), "src/registry/__index__.tsx"),
    index,
  );
}

async function buildRegistryJsonFile() {
  // 1. Use the registry as-is since paths are already correct
  const fixedRegistry = registry;

  // 2. Write the content of the registry to `registry.json`
  rimraf.sync(path.join(process.cwd(), `registry.json`));
  await fs.writeFile(
    path.join(process.cwd(), `registry.json`),
    JSON.stringify(fixedRegistry, null, 2),
  );

  // 3. Copy the registry.json to the public/r/styles/default directory.
  await fs.cp(
    path.join(process.cwd(), "registry.json"),
    path.join(process.cwd(), "public/r/styles/default/registry.json"),
    { recursive: true },
  );
}

async function buildRegistry() {
  return new Promise((resolve, reject) => {
    const process = exec(
      `pnpm exec shadcn build registry.json --output public/r/styles/default`,
    );

    process.on("exit", (code) => {
      if (code === 0) {
        resolve(undefined);
      } else {
        reject(new Error(`Process exited with code ${code}`));
      }
    });
  });
}

try {
  console.log("📁 Building registry/__index__.tsx...");
  await buildRegistryIndex();

  console.log("📄 Building registry.json...");
  await buildRegistryJsonFile();

  console.log("🔨 Building registry...");
  await buildRegistry();
} catch (error) {
  console.error(error);
  process.exit(1);
}
